{"version":3,"sources":["components/AnimatedHeader/AnimatedHeader.js","components/FixedFooter/FixedFooter.js","App.js","serviceWorker.js","index.js"],"names":["AnimatedChar","c","index","cls","key","className","AnimatedHeader","props","header","secondColorHeader","map","FixedFooter","lastTimeUpdate","icon","href","target","library","add","fab","faHeart","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wYAGMA,G,MAAe,SAACC,EAAGC,GAAmB,IAAZC,EAAW,uDAAP,GAClC,OACE,0BAAMC,IAAKF,EAAOG,UAAiB,MAANJ,EAAY,QAAU,iBAAmBE,GACnEF,KAuBQK,EAlBQ,SAACC,GAAW,IACzBC,EAA8BD,EAA9BC,OAAQC,EAAsBF,EAAtBE,kBAChB,OACE,8BAEA,wBAAIJ,UAAU,mBACXG,GACC,YAAIA,GAAQE,KAAI,SAACT,EAAGC,GAAJ,OAAcF,EAAaC,EAAGC,MAEhD,wBAAIG,UAAU,kBACbI,GACC,YAAIA,GAAmBC,KAAI,SAACT,EAAGC,GAAJ,OAAcF,EAAaC,EAAGC,EAAO,yBCAzDS,G,MAlBK,SAACJ,GAAW,IACvBK,EAAkBL,EAAlBK,eAEP,OACE,4BAAQP,UAAU,cAChB,2CAEE,kBAAC,IAAD,CAAiBQ,KAAK,QAAQR,UAAU,wBAF1C,OAIE,uBAAGS,KAAK,yCAAyCC,OAAO,KAAxD,eACEH,GACF,0BAAMP,UAAU,eAAhB,gCAAqDO,GAArD,S,cCLRI,IAAQC,IAAIC,IAAKC,KA0BFC,MAxBf,WACE,OACE,yBAAKf,UAAU,OAEb,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAgBG,OAAQ,WAAYC,kBAAmB,iBACvD,wBAAIJ,UAAU,aAAd,8BAEA,yBAAKA,UAAU,YACb,uBAAGS,KAAK,wCAAwCC,OAAO,KACrD,kBAAC,IAAD,CAAkBV,UAAU,cAAcQ,KAAM,CAAC,MAAO,eAE1D,uBAAGC,KAAK,iCAAiCC,OAAO,KAC9C,kBAAC,IAAD,CAAkBV,UAAU,cAAcQ,KAAM,CAAC,MAAO,eAM9D,kBAAC,EAAD,CAAaD,eAAgBA,QCnBfS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d3688262.chunk.js","sourcesContent":["import React from 'react'\nimport './AnimatedHeader.css';\n\nconst AnimatedChar = (c, index, cls=\"\") => {\n  return (\n    <span key={index} className={c === ' ' ? \"space\" : \"animated-char \" + cls}>\n      {c}\n    </span>\n  )\n}\n\nconst AnimatedHeader = (props) => {\n  const { header, secondColorHeader } = props;\n  return (\n    <span>\n\n    <h1 className=\"animated-header\">\n      {header && \n        [...header].map((c, index) => AnimatedChar(c, index))\n      }\n      <br className=\"hidden-mobile\" />\n      {secondColorHeader && \n        [...secondColorHeader].map((c, index) => AnimatedChar(c, index, \"different-color\"))\n      }\n    </h1>\n    </span>\n  )\n}\n\nexport default AnimatedHeader\n","import React from 'react'\nimport './FixedFooter.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst FixedFooter = (props) => {\n  const {lastTimeUpdate} = props\n\n  return (\n    <footer className=\"App-footer\">\n      <p>\n        {`Created with `}\n        <FontAwesomeIcon icon=\"heart\" className=\"heart animated-char\" /> \n        {` by `} \n        <a href=\"https://github.com/allannozomu/my-site\" target=\"#\">allannozomu</a>\n        { lastTimeUpdate && \n        <span className=\"last-update\"> {` | Last update on ${lastTimeUpdate}`} </span>\n        }\n      </p>\n    </footer>\n  )\n}\n\nexport default FixedFooter","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\nimport { AnimatedHeader, FixedFooter } from './components'\nimport { lastTimeUpdate } from './lastTimeUpdate.json';\n\nimport './App.css';\n\nlibrary.add(fab, faHeart)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <div className=\"content\">\n        <AnimatedHeader header={\"Hi, I'm \"} secondColorHeader={\"Allan Nozomu\"} />\n        <h3 className=\"SubHeader\">I'm a full-stack developer</h3>\n\n        <div className=\"App-body\">\n          <a href=\"https://linkedin.com/in/allan-nozomu/\" target=\"#\">\n            <FontAwesomeIcon  className=\"social-item\" icon={['fab', 'linkedin']} />\n          </a>\n          <a href=\"https://github.com/allannozomu\" target=\"#\">\n            <FontAwesomeIcon  className=\"social-item\" icon={['fab', 'github']} />\n          </a>\n        </div>\n\n      </div>\n\n      <FixedFooter lastTimeUpdate={lastTimeUpdate} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}